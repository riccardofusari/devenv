Reading pref.tcl

# 2020.4

# vsim -c -sv_seed random -do "sim.do" -do "cov.do" "+n100" reg_tb 
# Start time: 17:51:03 on Aug 27,2023
# ** Note: (vsim-3812) Design is being optimized...
# //  Questa Sim-64
# //  Version 2020.4 linux_x86_64 Oct 13 2020
# //
# //  Copyright 1991-2020 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  QuestaSim and its associated documentation contain trade
# //  secrets and commercial or financial information that are the property of
# //  Mentor Graphics Corporation and are privileged, confidential,
# //  and exempt from disclosure under the Freedom of Information Act,
# //  5 U.S.C. Section 552. Furthermore, this information
# //  is prohibited from disclosure under the Trade Secrets Act,
# //  18 U.S.C. Section 1905.
# //
# Loading sv_std.std
# Loading work.reg_tb_sv_unit(fast)
# Loading work.reg_tb(fast)
# Loading work.reg_wrap(fast)
# Loading std.standard
# Loading std.textio(body)
# Loading ieee.std_logic_1164(body)
# Loading work.reg_dut(synchronous)#1
# Loading work.reg_if(fast)
# Sv_Seed = 3635291606
# do sim.do

########## SIMULATION STARTS ##########

# [CONFIG] Number of test cycles set to 100
# 
# TEST #1 - Launching reg quiet test...
# TEST #1 - Test completed!
# TEST #1 - Functional coverage: 100.00%
# 
# TEST #2 - Launching reg verbose test...
# [   1075] | data in: 11110101 (245) | data out: 11110101 (245) | reset: 1
# [   1085] | data in: 00001011 ( 11) | data out: 00001011 ( 11) | reset: 1
# [   1095] | data in: 01010110 ( 86) | data out: 01010110 ( 86) | reset: 1
# [   1105] | data in: 01110100 (116) | data out: 00000000 (  0) | reset: 0
# [   1115] | data in: 11111000 (248) | data out: 11111000 (248) | reset: 1
# [   1125] | data in: 00101100 ( 44) | data out: 00101100 ( 44) | reset: 1
# [   1135] | data in: 00000000 (  0) | data out: 00000000 (  0) | reset: 1
# [   1145] | data in: 01100111 (103) | data out: 01100111 (103) | reset: 1
# [   1155] | data in: 01001100 ( 76) | data out: 01001100 ( 76) | reset: 1
# [   1165] | data in: 11111111 (255) | data out: 00000000 (  0) | reset: 0
# [   1175] | data in: 00110100 ( 52) | data out: 00110100 ( 52) | reset: 1
# [   1185] | data in: 01101011 (107) | data out: 00000000 (  0) | reset: 0
# [   1195] | data in: 11111000 (248) | data out: 00000000 (  0) | reset: 0
# [   1205] | data in: 00100111 ( 39) | data out: 00100111 ( 39) | reset: 1
# [   1215] | data in: 10110100 (180) | data out: 10110100 (180) | reset: 1
# [   1225] | data in: 11110011 (243) | data out: 11110011 (243) | reset: 1
# [   1235] | data in: 01001011 ( 75) | data out: 00000000 (  0) | reset: 0
# [   1245] | data in: 00001010 ( 10) | data out: 00000000 (  0) | reset: 0
# [   1255] | data in: 01100011 ( 99) | data out: 01100011 ( 99) | reset: 1
# [   1265] | data in: 11010101 (213) | data out: 11010101 (213) | reset: 1
# [   1275] | data in: 01100000 ( 96) | data out: 01100000 ( 96) | reset: 1
# [   1285] | data in: 00001111 ( 15) | data out: 00001111 ( 15) | reset: 1
# [   1295] | data in: 11101111 (239) | data out: 11101111 (239) | reset: 1
# [   1305] | data in: 00100110 ( 38) | data out: 00100110 ( 38) | reset: 1
# [   1315] | data in: 10100100 (164) | data out: 10100100 (164) | reset: 1
# [   1325] | data in: 00010010 ( 18) | data out: 00010010 ( 18) | reset: 1
# [   1335] | data in: 00000000 (  0) | data out: 00000000 (  0) | reset: 1
# [   1345] | data in: 01100000 ( 96) | data out: 01100000 ( 96) | reset: 1
# [   1355] | data in: 01110101 (117) | data out: 01110101 (117) | reset: 1
# [   1365] | data in: 01011011 ( 91) | data out: 01011011 ( 91) | reset: 1
# [   1375] | data in: 11100100 (228) | data out: 11100100 (228) | reset: 1
# [   1385] | data in: 01010000 ( 80) | data out: 01010000 ( 80) | reset: 1
# [   1395] | data in: 01100001 ( 97) | data out: 01100001 ( 97) | reset: 1
# [   1405] | data in: 01011100 ( 92) | data out: 01011100 ( 92) | reset: 1
# [   1415] | data in: 10010010 (146) | data out: 10010010 (146) | reset: 1
# [   1425] | data in: 10100110 (166) | data out: 10100110 (166) | reset: 1
# [   1435] | data in: 10110100 (180) | data out: 10110100 (180) | reset: 1
# [   1445] | data in: 00110000 ( 48) | data out: 00110000 ( 48) | reset: 1
# [   1455] | data in: 10011011 (155) | data out: 10011011 (155) | reset: 1
# [   1465] | data in: 00000000 (  0) | data out: 00000000 (  0) | reset: 1
# [   1475] | data in: 00000011 (  3) | data out: 00000011 (  3) | reset: 1
# [   1485] | data in: 11100110 (230) | data out: 11100110 (230) | reset: 1
# [   1495] | data in: 10100100 (164) | data out: 10100100 (164) | reset: 1
# [   1505] | data in: 01000000 ( 64) | data out: 01000000 ( 64) | reset: 1
# [   1515] | data in: 01000101 ( 69) | data out: 01000101 ( 69) | reset: 1
# [   1525] | data in: 01111001 (121) | data out: 01111001 (121) | reset: 1
# [   1535] | data in: 11110111 (247) | data out: 11110111 (247) | reset: 1
# [   1545] | data in: 10100110 (166) | data out: 10100110 (166) | reset: 1
# [   1555] | data in: 11001110 (206) | data out: 11001110 (206) | reset: 1
# [   1565] | data in: 11101001 (233) | data out: 11101001 (233) | reset: 1
# [   1575] | data in: 11110000 (240) | data out: 11110000 (240) | reset: 1
# [   1585] | data in: 10100100 (164) | data out: 10100100 (164) | reset: 1
# [   1595] | data in: 00011000 ( 24) | data out: 00000000 (  0) | reset: 0
# [   1605] | data in: 00101110 ( 46) | data out: 00101110 ( 46) | reset: 1
# [   1615] | data in: 10111111 (191) | data out: 00000000 (  0) | reset: 0
# [   1625] | data in: 01110100 (116) | data out: 01110100 (116) | reset: 1
# [   1635] | data in: 00110110 ( 54) | data out: 00110110 ( 54) | reset: 1
# [   1645] | data in: 11111111 (255) | data out: 11111111 (255) | reset: 1
# [   1655] | data in: 10000011 (131) | data out: 10000011 (131) | reset: 1
# [   1665] | data in: 01010100 ( 84) | data out: 01010100 ( 84) | reset: 1
# [   1675] | data in: 00111111 ( 63) | data out: 00111111 ( 63) | reset: 1
# [   1685] | data in: 01110100 (116) | data out: 01110100 (116) | reset: 1
# [   1695] | data in: 00000010 (  2) | data out: 00000000 (  0) | reset: 0
# [   1705] | data in: 01010111 ( 87) | data out: 01010111 ( 87) | reset: 1
# [   1715] | data in: 01110011 (115) | data out: 01110011 (115) | reset: 1
# [   1725] | data in: 01100101 (101) | data out: 01100101 (101) | reset: 1
# [   1735] | data in: 00100000 ( 32) | data out: 00100000 ( 32) | reset: 1
# [   1745] | data in: 10011101 (157) | data out: 10011101 (157) | reset: 1
# [   1755] | data in: 11001000 (200) | data out: 11001000 (200) | reset: 1
# [   1765] | data in: 00100011 ( 35) | data out: 00100011 ( 35) | reset: 1
# [   1775] | data in: 01111111 (127) | data out: 00000000 (  0) | reset: 0
# [   1785] | data in: 11010011 (211) | data out: 11010011 (211) | reset: 1
# [   1795] | data in: 11011000 (216) | data out: 11011000 (216) | reset: 1
# [   1805] | data in: 10111100 (188) | data out: 10111100 (188) | reset: 1
# [   1815] | data in: 01001010 ( 74) | data out: 00000000 (  0) | reset: 0
# [   1825] | data in: 00011010 ( 26) | data out: 00011010 ( 26) | reset: 1
# [   1835] | data in: 11110001 (241) | data out: 11110001 (241) | reset: 1
# [   1845] | data in: 01010101 ( 85) | data out: 01010101 ( 85) | reset: 1
# [   1855] | data in: 10000000 (128) | data out: 10000000 (128) | reset: 1
# [   1865] | data in: 10000001 (129) | data out: 10000001 (129) | reset: 1
# [   1875] | data in: 00101100 ( 44) | data out: 00101100 ( 44) | reset: 1
# [   1885] | data in: 01111111 (127) | data out: 00000000 (  0) | reset: 0
# [   1895] | data in: 00010000 ( 16) | data out: 00010000 ( 16) | reset: 1
# [   1905] | data in: 00101100 ( 44) | data out: 00000000 (  0) | reset: 0
# [   1915] | data in: 10000110 (134) | data out: 10000110 (134) | reset: 1
# [   1925] | data in: 00000110 (  6) | data out: 00000110 (  6) | reset: 1
# [   1935] | data in: 01011011 ( 91) | data out: 01011011 ( 91) | reset: 1
# [   1945] | data in: 11011101 (221) | data out: 11011101 (221) | reset: 1
# [   1955] | data in: 01111111 (127) | data out: 01111111 (127) | reset: 1
# [   1965] | data in: 00101111 ( 47) | data out: 00101111 ( 47) | reset: 1
# [   1975] | data in: 01010111 ( 87) | data out: 01010111 ( 87) | reset: 1
# [   1985] | data in: 01111110 (126) | data out: 01111110 (126) | reset: 1
# [   1995] | data in: 01001110 ( 78) | data out: 01001110 ( 78) | reset: 1
# [   2005] | data in: 01110110 (118) | data out: 00000000 (  0) | reset: 0
# [   2015] | data in: 01111111 (127) | data out: 01111111 (127) | reset: 1
# [   2025] | data in: 00100100 ( 36) | data out: 00100100 ( 36) | reset: 1
# [   2035] | data in: 00101101 ( 45) | data out: 00101101 ( 45) | reset: 1
# [   2045] | data in: 11111101 (253) | data out: 11111101 (253) | reset: 1
# [   2055] | data in: 11000101 (197) | data out: 11000101 (197) | reset: 1
# [   2065] | data in: 00000110 (  6) | data out: 00000110 (  6) | reset: 1
# TEST #2 - Test completed!
# TEST #2 - Functional coverage: 100.00%
# 
# TOTAL FUNCTIONAL COVERAGE: 100.00%
# 
### TEST PASSED!
# 
# ** Note: $stop    : ../tb/reg_tb.sv(97)
#    Time: 2065 ns  Iteration: 1  Instance: /reg_tb
# Break at ../tb/reg_tb.sv line 97
# Stopped at ../tb/reg_tb.sv line 97

##########  SIMULATION ENDS  ##########

# End time: 17:51:05 on Aug 27,2023, Elapsed time: 0:00:02
# Errors: 0, Warnings: 0
